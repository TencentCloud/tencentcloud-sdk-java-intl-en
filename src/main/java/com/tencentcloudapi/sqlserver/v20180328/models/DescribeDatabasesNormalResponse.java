/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.tencentcloudapi.sqlserver.v20180328.models;

import com.tencentcloudapi.common.AbstractModel;
import com.tencentcloudapi.common.SSEResponseModel;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import java.util.HashMap;

public class DescribeDatabasesNormalResponse extends AbstractModel {

    /**
    * Indicates the total number of databases under the current instance.
    */
    @SerializedName("TotalCount")
    @Expose
    private Long TotalCount;

    /**
    * Returns detailed configuration information of the databases, such as whether CDC and CT are enabled for the databases.
    */
    @SerializedName("DBList")
    @Expose
    private DbNormalDetail [] DBList;

    /**
    * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
    */
    @SerializedName("RequestId")
    @Expose
    private String RequestId;

    /**
     * Get Indicates the total number of databases under the current instance. 
     * @return TotalCount Indicates the total number of databases under the current instance.
     */
    public Long getTotalCount() {
        return this.TotalCount;
    }

    /**
     * Set Indicates the total number of databases under the current instance.
     * @param TotalCount Indicates the total number of databases under the current instance.
     */
    public void setTotalCount(Long TotalCount) {
        this.TotalCount = TotalCount;
    }

    /**
     * Get Returns detailed configuration information of the databases, such as whether CDC and CT are enabled for the databases. 
     * @return DBList Returns detailed configuration information of the databases, such as whether CDC and CT are enabled for the databases.
     */
    public DbNormalDetail [] getDBList() {
        return this.DBList;
    }

    /**
     * Set Returns detailed configuration information of the databases, such as whether CDC and CT are enabled for the databases.
     * @param DBList Returns detailed configuration information of the databases, such as whether CDC and CT are enabled for the databases.
     */
    public void setDBList(DbNormalDetail [] DBList) {
        this.DBList = DBList;
    }

    /**
     * Get The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem. 
     * @return RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public String getRequestId() {
        return this.RequestId;
    }

    /**
     * Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     * @param RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public void setRequestId(String RequestId) {
        this.RequestId = RequestId;
    }

    public DescribeDatabasesNormalResponse() {
    }

    /**
     * NOTE: Any ambiguous key set via .set("AnyKey", "value") will be a shallow copy,
     *       and any explicit key, i.e Foo, set via .setFoo("value") will be a deep copy.
     */
    public DescribeDatabasesNormalResponse(DescribeDatabasesNormalResponse source) {
        if (source.TotalCount != null) {
            this.TotalCount = new Long(source.TotalCount);
        }
        if (source.DBList != null) {
            this.DBList = new DbNormalDetail[source.DBList.length];
            for (int i = 0; i < source.DBList.length; i++) {
                this.DBList[i] = new DbNormalDetail(source.DBList[i]);
            }
        }
        if (source.RequestId != null) {
            this.RequestId = new String(source.RequestId);
        }
    }


    /**
     * Internal implementation, normal users should not use it.
     */
    public void toMap(HashMap<String, String> map, String prefix) {
        this.setParamSimple(map, prefix + "TotalCount", this.TotalCount);
        this.setParamArrayObj(map, prefix + "DBList.", this.DBList);
        this.setParamSimple(map, prefix + "RequestId", this.RequestId);

    }
}

