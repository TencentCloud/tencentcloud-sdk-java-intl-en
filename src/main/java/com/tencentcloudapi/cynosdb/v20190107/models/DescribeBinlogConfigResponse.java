/*
 * Copyright (c) 2017-2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.tencentcloudapi.cynosdb.v20190107.models;

import com.tencentcloudapi.common.AbstractModel;
import com.tencentcloudapi.common.SSEResponseModel;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import java.util.HashMap;

public class DescribeBinlogConfigResponse extends AbstractModel {

    /**
    * Configuration update time for cross-regional Binlog.
    */
    @SerializedName("BinlogCrossRegionsConfigUpdateTime")
    @Expose
    private String BinlogCrossRegionsConfigUpdateTime;

    /**
    * Specifies the Binlog configuration message.
    */
    @SerializedName("BinlogConfig")
    @Expose
    private BinlogConfigInfo BinlogConfig;

    /**
    * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
    */
    @SerializedName("RequestId")
    @Expose
    private String RequestId;

    /**
     * Get Configuration update time for cross-regional Binlog. 
     * @return BinlogCrossRegionsConfigUpdateTime Configuration update time for cross-regional Binlog.
     */
    public String getBinlogCrossRegionsConfigUpdateTime() {
        return this.BinlogCrossRegionsConfigUpdateTime;
    }

    /**
     * Set Configuration update time for cross-regional Binlog.
     * @param BinlogCrossRegionsConfigUpdateTime Configuration update time for cross-regional Binlog.
     */
    public void setBinlogCrossRegionsConfigUpdateTime(String BinlogCrossRegionsConfigUpdateTime) {
        this.BinlogCrossRegionsConfigUpdateTime = BinlogCrossRegionsConfigUpdateTime;
    }

    /**
     * Get Specifies the Binlog configuration message. 
     * @return BinlogConfig Specifies the Binlog configuration message.
     */
    public BinlogConfigInfo getBinlogConfig() {
        return this.BinlogConfig;
    }

    /**
     * Set Specifies the Binlog configuration message.
     * @param BinlogConfig Specifies the Binlog configuration message.
     */
    public void setBinlogConfig(BinlogConfigInfo BinlogConfig) {
        this.BinlogConfig = BinlogConfig;
    }

    /**
     * Get The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem. 
     * @return RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public String getRequestId() {
        return this.RequestId;
    }

    /**
     * Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     * @param RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public void setRequestId(String RequestId) {
        this.RequestId = RequestId;
    }

    public DescribeBinlogConfigResponse() {
    }

    /**
     * NOTE: Any ambiguous key set via .set("AnyKey", "value") will be a shallow copy,
     *       and any explicit key, i.e Foo, set via .setFoo("value") will be a deep copy.
     */
    public DescribeBinlogConfigResponse(DescribeBinlogConfigResponse source) {
        if (source.BinlogCrossRegionsConfigUpdateTime != null) {
            this.BinlogCrossRegionsConfigUpdateTime = new String(source.BinlogCrossRegionsConfigUpdateTime);
        }
        if (source.BinlogConfig != null) {
            this.BinlogConfig = new BinlogConfigInfo(source.BinlogConfig);
        }
        if (source.RequestId != null) {
            this.RequestId = new String(source.RequestId);
        }
    }


    /**
     * Internal implementation, normal users should not use it.
     */
    public void toMap(HashMap<String, String> map, String prefix) {
        this.setParamSimple(map, prefix + "BinlogCrossRegionsConfigUpdateTime", this.BinlogCrossRegionsConfigUpdateTime);
        this.setParamObj(map, prefix + "BinlogConfig.", this.BinlogConfig);
        this.setParamSimple(map, prefix + "RequestId", this.RequestId);

    }
}

