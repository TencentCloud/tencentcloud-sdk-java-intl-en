/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.tencentcloudapi.vod.v20180717.models;

import com.tencentcloudapi.common.AbstractModel;
import com.tencentcloudapi.common.SSEResponseModel;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import java.util.HashMap;

public class DescribeAdaptiveDynamicStreamingTemplatesResponse extends AbstractModel {

    /**
    * The total number of records matching the filter criteria.
    */
    @SerializedName("TotalCount")
    @Expose
    private Long TotalCount;

    /**
    * List of transcoding to adaptive bitrate streaming template details.
    */
    @SerializedName("AdaptiveDynamicStreamingTemplateSet")
    @Expose
    private AdaptiveDynamicStreamingTemplate [] AdaptiveDynamicStreamingTemplateSet;

    /**
    * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
    */
    @SerializedName("RequestId")
    @Expose
    private String RequestId;

    /**
     * Get The total number of records matching the filter criteria. 
     * @return TotalCount The total number of records matching the filter criteria.
     */
    public Long getTotalCount() {
        return this.TotalCount;
    }

    /**
     * Set The total number of records matching the filter criteria.
     * @param TotalCount The total number of records matching the filter criteria.
     */
    public void setTotalCount(Long TotalCount) {
        this.TotalCount = TotalCount;
    }

    /**
     * Get List of transcoding to adaptive bitrate streaming template details. 
     * @return AdaptiveDynamicStreamingTemplateSet List of transcoding to adaptive bitrate streaming template details.
     */
    public AdaptiveDynamicStreamingTemplate [] getAdaptiveDynamicStreamingTemplateSet() {
        return this.AdaptiveDynamicStreamingTemplateSet;
    }

    /**
     * Set List of transcoding to adaptive bitrate streaming template details.
     * @param AdaptiveDynamicStreamingTemplateSet List of transcoding to adaptive bitrate streaming template details.
     */
    public void setAdaptiveDynamicStreamingTemplateSet(AdaptiveDynamicStreamingTemplate [] AdaptiveDynamicStreamingTemplateSet) {
        this.AdaptiveDynamicStreamingTemplateSet = AdaptiveDynamicStreamingTemplateSet;
    }

    /**
     * Get The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem. 
     * @return RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public String getRequestId() {
        return this.RequestId;
    }

    /**
     * Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     * @param RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public void setRequestId(String RequestId) {
        this.RequestId = RequestId;
    }

    public DescribeAdaptiveDynamicStreamingTemplatesResponse() {
    }

    /**
     * NOTE: Any ambiguous key set via .set("AnyKey", "value") will be a shallow copy,
     *       and any explicit key, i.e Foo, set via .setFoo("value") will be a deep copy.
     */
    public DescribeAdaptiveDynamicStreamingTemplatesResponse(DescribeAdaptiveDynamicStreamingTemplatesResponse source) {
        if (source.TotalCount != null) {
            this.TotalCount = new Long(source.TotalCount);
        }
        if (source.AdaptiveDynamicStreamingTemplateSet != null) {
            this.AdaptiveDynamicStreamingTemplateSet = new AdaptiveDynamicStreamingTemplate[source.AdaptiveDynamicStreamingTemplateSet.length];
            for (int i = 0; i < source.AdaptiveDynamicStreamingTemplateSet.length; i++) {
                this.AdaptiveDynamicStreamingTemplateSet[i] = new AdaptiveDynamicStreamingTemplate(source.AdaptiveDynamicStreamingTemplateSet[i]);
            }
        }
        if (source.RequestId != null) {
            this.RequestId = new String(source.RequestId);
        }
    }


    /**
     * Internal implementation, normal users should not use it.
     */
    public void toMap(HashMap<String, String> map, String prefix) {
        this.setParamSimple(map, prefix + "TotalCount", this.TotalCount);
        this.setParamArrayObj(map, prefix + "AdaptiveDynamicStreamingTemplateSet.", this.AdaptiveDynamicStreamingTemplateSet);
        this.setParamSimple(map, prefix + "RequestId", this.RequestId);

    }
}

