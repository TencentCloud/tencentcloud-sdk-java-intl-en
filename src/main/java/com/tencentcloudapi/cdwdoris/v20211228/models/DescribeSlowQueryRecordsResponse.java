/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.tencentcloudapi.cdwdoris.v20211228.models;

import com.tencentcloudapi.common.AbstractModel;
import com.tencentcloudapi.common.SSEResponseModel;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import java.util.HashMap;

public class DescribeSlowQueryRecordsResponse extends AbstractModel {

    /**
    * Total
    */
    @SerializedName("TotalCount")
    @Expose
    private Long TotalCount;

    /**
    * Record list
    */
    @SerializedName("SlowQueryRecords")
    @Expose
    private SlowQueryRecord [] SlowQueryRecords;

    /**
    * All database names
Note: This field may return null, indicating that no valid values can be obtained.
    */
    @SerializedName("DBNameList")
    @Expose
    private String [] DBNameList;

    /**
    * All catalog names
Note: This field may return null, indicating that no valid values can be obtained.
    */
    @SerializedName("CatalogNameList")
    @Expose
    private String [] CatalogNameList;

    /**
    * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
    */
    @SerializedName("RequestId")
    @Expose
    private String RequestId;

    /**
     * Get Total 
     * @return TotalCount Total
     */
    public Long getTotalCount() {
        return this.TotalCount;
    }

    /**
     * Set Total
     * @param TotalCount Total
     */
    public void setTotalCount(Long TotalCount) {
        this.TotalCount = TotalCount;
    }

    /**
     * Get Record list 
     * @return SlowQueryRecords Record list
     */
    public SlowQueryRecord [] getSlowQueryRecords() {
        return this.SlowQueryRecords;
    }

    /**
     * Set Record list
     * @param SlowQueryRecords Record list
     */
    public void setSlowQueryRecords(SlowQueryRecord [] SlowQueryRecords) {
        this.SlowQueryRecords = SlowQueryRecords;
    }

    /**
     * Get All database names
Note: This field may return null, indicating that no valid values can be obtained. 
     * @return DBNameList All database names
Note: This field may return null, indicating that no valid values can be obtained.
     */
    public String [] getDBNameList() {
        return this.DBNameList;
    }

    /**
     * Set All database names
Note: This field may return null, indicating that no valid values can be obtained.
     * @param DBNameList All database names
Note: This field may return null, indicating that no valid values can be obtained.
     */
    public void setDBNameList(String [] DBNameList) {
        this.DBNameList = DBNameList;
    }

    /**
     * Get All catalog names
Note: This field may return null, indicating that no valid values can be obtained. 
     * @return CatalogNameList All catalog names
Note: This field may return null, indicating that no valid values can be obtained.
     */
    public String [] getCatalogNameList() {
        return this.CatalogNameList;
    }

    /**
     * Set All catalog names
Note: This field may return null, indicating that no valid values can be obtained.
     * @param CatalogNameList All catalog names
Note: This field may return null, indicating that no valid values can be obtained.
     */
    public void setCatalogNameList(String [] CatalogNameList) {
        this.CatalogNameList = CatalogNameList;
    }

    /**
     * Get The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem. 
     * @return RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public String getRequestId() {
        return this.RequestId;
    }

    /**
     * Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     * @param RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public void setRequestId(String RequestId) {
        this.RequestId = RequestId;
    }

    public DescribeSlowQueryRecordsResponse() {
    }

    /**
     * NOTE: Any ambiguous key set via .set("AnyKey", "value") will be a shallow copy,
     *       and any explicit key, i.e Foo, set via .setFoo("value") will be a deep copy.
     */
    public DescribeSlowQueryRecordsResponse(DescribeSlowQueryRecordsResponse source) {
        if (source.TotalCount != null) {
            this.TotalCount = new Long(source.TotalCount);
        }
        if (source.SlowQueryRecords != null) {
            this.SlowQueryRecords = new SlowQueryRecord[source.SlowQueryRecords.length];
            for (int i = 0; i < source.SlowQueryRecords.length; i++) {
                this.SlowQueryRecords[i] = new SlowQueryRecord(source.SlowQueryRecords[i]);
            }
        }
        if (source.DBNameList != null) {
            this.DBNameList = new String[source.DBNameList.length];
            for (int i = 0; i < source.DBNameList.length; i++) {
                this.DBNameList[i] = new String(source.DBNameList[i]);
            }
        }
        if (source.CatalogNameList != null) {
            this.CatalogNameList = new String[source.CatalogNameList.length];
            for (int i = 0; i < source.CatalogNameList.length; i++) {
                this.CatalogNameList[i] = new String(source.CatalogNameList[i]);
            }
        }
        if (source.RequestId != null) {
            this.RequestId = new String(source.RequestId);
        }
    }


    /**
     * Internal implementation, normal users should not use it.
     */
    public void toMap(HashMap<String, String> map, String prefix) {
        this.setParamSimple(map, prefix + "TotalCount", this.TotalCount);
        this.setParamArrayObj(map, prefix + "SlowQueryRecords.", this.SlowQueryRecords);
        this.setParamArraySimple(map, prefix + "DBNameList.", this.DBNameList);
        this.setParamArraySimple(map, prefix + "CatalogNameList.", this.CatalogNameList);
        this.setParamSimple(map, prefix + "RequestId", this.RequestId);

    }
}

