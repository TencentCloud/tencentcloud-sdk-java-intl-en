/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.tencentcloudapi.lkeap.v20240522.models;

import com.tencentcloudapi.common.AbstractModel;
import com.tencentcloudapi.common.SSEResponseModel;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import java.util.HashMap;

public class RunRerankResponse extends AbstractModel {

    /**
    * Relevance. A higher numeric value indicates greater relevance.
    */
    @SerializedName("ScoreList")
    @Expose
    private Float [] ScoreList;

    /**
    * Consumption. Only returns TotalToken.
    */
    @SerializedName("Usage")
    @Expose
    private Usage Usage;

    /**
    * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
    */
    @SerializedName("RequestId")
    @Expose
    private String RequestId;

    /**
     * Get Relevance. A higher numeric value indicates greater relevance. 
     * @return ScoreList Relevance. A higher numeric value indicates greater relevance.
     */
    public Float [] getScoreList() {
        return this.ScoreList;
    }

    /**
     * Set Relevance. A higher numeric value indicates greater relevance.
     * @param ScoreList Relevance. A higher numeric value indicates greater relevance.
     */
    public void setScoreList(Float [] ScoreList) {
        this.ScoreList = ScoreList;
    }

    /**
     * Get Consumption. Only returns TotalToken. 
     * @return Usage Consumption. Only returns TotalToken.
     */
    public Usage getUsage() {
        return this.Usage;
    }

    /**
     * Set Consumption. Only returns TotalToken.
     * @param Usage Consumption. Only returns TotalToken.
     */
    public void setUsage(Usage Usage) {
        this.Usage = Usage;
    }

    /**
     * Get The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem. 
     * @return RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public String getRequestId() {
        return this.RequestId;
    }

    /**
     * Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     * @param RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public void setRequestId(String RequestId) {
        this.RequestId = RequestId;
    }

    public RunRerankResponse() {
    }

    /**
     * NOTE: Any ambiguous key set via .set("AnyKey", "value") will be a shallow copy,
     *       and any explicit key, i.e Foo, set via .setFoo("value") will be a deep copy.
     */
    public RunRerankResponse(RunRerankResponse source) {
        if (source.ScoreList != null) {
            this.ScoreList = new Float[source.ScoreList.length];
            for (int i = 0; i < source.ScoreList.length; i++) {
                this.ScoreList[i] = new Float(source.ScoreList[i]);
            }
        }
        if (source.Usage != null) {
            this.Usage = new Usage(source.Usage);
        }
        if (source.RequestId != null) {
            this.RequestId = new String(source.RequestId);
        }
    }


    /**
     * Internal implementation, normal users should not use it.
     */
    public void toMap(HashMap<String, String> map, String prefix) {
        this.setParamArraySimple(map, prefix + "ScoreList.", this.ScoreList);
        this.setParamObj(map, prefix + "Usage.", this.Usage);
        this.setParamSimple(map, prefix + "RequestId", this.RequestId);

    }
}

