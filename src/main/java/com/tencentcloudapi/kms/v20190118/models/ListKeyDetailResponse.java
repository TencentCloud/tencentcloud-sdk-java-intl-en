/*
 * Copyright (c) 2017-2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.tencentcloudapi.kms.v20190118.models;

import com.tencentcloudapi.common.AbstractModel;
import com.tencentcloudapi.common.SSEResponseModel;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import java.util.HashMap;

public class ListKeyDetailResponse extends AbstractModel {

    /**
    * Total number of CMKs
    */
    @SerializedName("TotalCount")
    @Expose
    private Long TotalCount;

    /**
    * Specifies the returned attribute information list.
    */
    @SerializedName("KeyMetadatas")
    @Expose
    private KeyMetadata [] KeyMetadatas;

    /**
    * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
    */
    @SerializedName("RequestId")
    @Expose
    private String RequestId;

    /**
     * Get Total number of CMKs 
     * @return TotalCount Total number of CMKs
     */
    public Long getTotalCount() {
        return this.TotalCount;
    }

    /**
     * Set Total number of CMKs
     * @param TotalCount Total number of CMKs
     */
    public void setTotalCount(Long TotalCount) {
        this.TotalCount = TotalCount;
    }

    /**
     * Get Specifies the returned attribute information list. 
     * @return KeyMetadatas Specifies the returned attribute information list.
     */
    public KeyMetadata [] getKeyMetadatas() {
        return this.KeyMetadatas;
    }

    /**
     * Set Specifies the returned attribute information list.
     * @param KeyMetadatas Specifies the returned attribute information list.
     */
    public void setKeyMetadatas(KeyMetadata [] KeyMetadatas) {
        this.KeyMetadatas = KeyMetadatas;
    }

    /**
     * Get The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem. 
     * @return RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public String getRequestId() {
        return this.RequestId;
    }

    /**
     * Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     * @param RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public void setRequestId(String RequestId) {
        this.RequestId = RequestId;
    }

    public ListKeyDetailResponse() {
    }

    /**
     * NOTE: Any ambiguous key set via .set("AnyKey", "value") will be a shallow copy,
     *       and any explicit key, i.e Foo, set via .setFoo("value") will be a deep copy.
     */
    public ListKeyDetailResponse(ListKeyDetailResponse source) {
        if (source.TotalCount != null) {
            this.TotalCount = new Long(source.TotalCount);
        }
        if (source.KeyMetadatas != null) {
            this.KeyMetadatas = new KeyMetadata[source.KeyMetadatas.length];
            for (int i = 0; i < source.KeyMetadatas.length; i++) {
                this.KeyMetadatas[i] = new KeyMetadata(source.KeyMetadatas[i]);
            }
        }
        if (source.RequestId != null) {
            this.RequestId = new String(source.RequestId);
        }
    }


    /**
     * Internal implementation, normal users should not use it.
     */
    public void toMap(HashMap<String, String> map, String prefix) {
        this.setParamSimple(map, prefix + "TotalCount", this.TotalCount);
        this.setParamArrayObj(map, prefix + "KeyMetadatas.", this.KeyMetadatas);
        this.setParamSimple(map, prefix + "RequestId", this.RequestId);

    }
}

