/*
 * Copyright (c) 2017-2025 Tencent. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.tencentcloudapi.wedata.v20210820.models;

import com.tencentcloudapi.common.AbstractModel;
import com.tencentcloudapi.common.SSEResponseModel;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;
import java.util.HashMap;

public class DescribeDataSourceInfoListResponse extends AbstractModel {

    /**
    * Total number of items.
    */
    @SerializedName("TotalCount")
    @Expose
    private Long TotalCount;

    /**
    * Data Source Information List.
Note: This field may return null, indicating that no valid value can be obtained.
    */
    @SerializedName("DatasourceSet")
    @Expose
    private DatasourceBaseInfo [] DatasourceSet;

    /**
    * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
    */
    @SerializedName("RequestId")
    @Expose
    private String RequestId;

    /**
     * Get Total number of items. 
     * @return TotalCount Total number of items.
     */
    public Long getTotalCount() {
        return this.TotalCount;
    }

    /**
     * Set Total number of items.
     * @param TotalCount Total number of items.
     */
    public void setTotalCount(Long TotalCount) {
        this.TotalCount = TotalCount;
    }

    /**
     * Get Data Source Information List.
Note: This field may return null, indicating that no valid value can be obtained. 
     * @return DatasourceSet Data Source Information List.
Note: This field may return null, indicating that no valid value can be obtained.
     */
    public DatasourceBaseInfo [] getDatasourceSet() {
        return this.DatasourceSet;
    }

    /**
     * Set Data Source Information List.
Note: This field may return null, indicating that no valid value can be obtained.
     * @param DatasourceSet Data Source Information List.
Note: This field may return null, indicating that no valid value can be obtained.
     */
    public void setDatasourceSet(DatasourceBaseInfo [] DatasourceSet) {
        this.DatasourceSet = DatasourceSet;
    }

    /**
     * Get The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem. 
     * @return RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public String getRequestId() {
        return this.RequestId;
    }

    /**
     * Set The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     * @param RequestId The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
     */
    public void setRequestId(String RequestId) {
        this.RequestId = RequestId;
    }

    public DescribeDataSourceInfoListResponse() {
    }

    /**
     * NOTE: Any ambiguous key set via .set("AnyKey", "value") will be a shallow copy,
     *       and any explicit key, i.e Foo, set via .setFoo("value") will be a deep copy.
     */
    public DescribeDataSourceInfoListResponse(DescribeDataSourceInfoListResponse source) {
        if (source.TotalCount != null) {
            this.TotalCount = new Long(source.TotalCount);
        }
        if (source.DatasourceSet != null) {
            this.DatasourceSet = new DatasourceBaseInfo[source.DatasourceSet.length];
            for (int i = 0; i < source.DatasourceSet.length; i++) {
                this.DatasourceSet[i] = new DatasourceBaseInfo(source.DatasourceSet[i]);
            }
        }
        if (source.RequestId != null) {
            this.RequestId = new String(source.RequestId);
        }
    }


    /**
     * Internal implementation, normal users should not use it.
     */
    public void toMap(HashMap<String, String> map, String prefix) {
        this.setParamSimple(map, prefix + "TotalCount", this.TotalCount);
        this.setParamArrayObj(map, prefix + "DatasourceSet.", this.DatasourceSet);
        this.setParamSimple(map, prefix + "RequestId", this.RequestId);

    }
}

